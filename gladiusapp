#!/usr/bin/env python3

import binascii
import cgi
import cgitb
import contextlib
import gpg
import gpg.errors
import json
import os
import tempfile
import time
import web3

###############################################################################
# Stuff that can be customized
###############################################################################

# The URL we should make our forms post back to. This can (and probably should)
# be a relative URL. It does not have to be anything fancier than the name
# under which this is installed in the cgi-bin directory.
g_form_url = 'gladiusapp'

# The address of the contract.
g_contract = '0x5bd4bb7be6b37cf253ed7564432a43d4a8426a1a'

# Number of seconds to unlock a user's account for. This should be as short
# as possible to reduce the window in which someone else could use the JSON
# API to do bad things with the user's account.
g_unlock_account_duration = 10

# Number of seconds to wait for the transaction to either "show up" or
# "be rejected" before giving up and returning a "maybe" answer to the user.
g_transaction_timeout = 120

# My name and email address (just, y'know, cuz.)
g_owner_name = 'Ben "Tamino" Cottrell'
g_owner_email = 'tamino@wolfhut.org'

###############################################################################
# Design writeup
###############################################################################

# Assumptions:
#
#   - The schema in 'getEncryptedData()' will always be a superset of the
#     schema in 'getPublicData()'. In other words, I'm assuming we don't
#     have to merge the two schemas together or come up with a union or
#     something. I'm only going to pay attention to the one in
#     'getEncryptedData()'.
#
#   - The schema will always be a flat map of strings to strings. It would
#     be possible to support other data types for the values, but without
#     an example of how that would look in the schema, I'm not going to
#     venture to make guesses.
#
# Main CGI variables that we use:
#
#   - 'account': Account that the user is asking about
#
#   - 'mode': Either 'view', 'prepare', or 'submit'
#
# The 'mode' variable is actually not technically a CGI variable, it's
# a computed value that we calculate early on in processing, based on
# which button was pushed. At a CGI level, the variables that comprise
# 'mode' are named 'mode_view', 'mode_prepare', etc.
#
# Other CGI variables we use are 'passphrase' and 'app_*'. The app_ prefix
# is used to keep all the application-related variables in their own
# namespace so they don't collide with the infrastructure.
#
# Pages that we might decide to render:
#
#   - Account Selection Form
#       - Text box where a user can enter an address, either their own
#         account or whatever other address they might want to query
#         against
#       - Two buttons: "View Application" and "Prepare Application"
#
#   - Application Preparation Form
#       - Whatever form fields the application consists of
#       - A passphrase form field if the user wants us to unlock their
#         account for a limited time (or they can leave it blank if they
#         want to handle unlocking it themselves and locking it again
#         afterwards)
#       - Two buttons: "Switch Account" and "Apply"
#
#   - Application Submission Confirmation Page
#       - A transaction hash (at the very least)
#       - A block number and a block hash (if we have them)
#       - Two buttons: "Switch Account" and "View Application"
#
#   - Application Viewing Page
#       - The raw data of the user's application (since it's encrypted with
#         Gladius's public key, which we don't have the private key to, we
#         can't decrypt it, all we can do is print it)
#       - One button: "Switch Account"
#
# Decision tree:
#
# If 'account' is unset or syntactically invalid, or if 'mode' is unset or
# set to an unrecognized value, or if the schema cannot be successfully
# fetched:
#   - We show the Account Selection Form.
# Otherwise, if 'mode' is 'view':
#   - We try to look up their application.
#   - If we succeed, then we show the Application Viewing Page.
#   - Otherwise, we show the Account Selection Form with an error message.
# Otherwise, if 'mode' is 'prepare':
#   - We show the Application Preparation Form.
# Otherwise, if 'mode' is 'submit' (which should be the only possibility left):
#   - We try to submit their application.
#   - If we succeed, then we show the Application Submission Confirmation Page.
#   - Otherwise, we show the Application Preparation Form with an error
#     message.
#
# Errors: We keep track of all errors, and we always display all of them
# at the top of the page, regardless of whether we also display some of
# them, again, next to the field they apply to. This is so that the user
# doesn't get stuck wondering "why did I get kicked back to this form? I
# don't see an error here" when it's just the fact that they didn't scroll
# down far enough to see the error that was present.
#
# Also, some errors may just be general errors and not relate to any
# field in particular. So we err on the side of displaying more information.
#
# A note about 'str' vs 'bytes': This is Python 3, and Python 3 tends to
# over-use 'str' (i.e. unicode) even for things that really shouldn't be
# unicode. In the interest of time and code readability, I'm not resisting
# that as hard as I normally would in production code. In "real code" I try
# pretty hard to maintain a rigorous mental separation between what's bytes
# and what's unicode. But for this exercise, if Python 3 really wants
# something to be unicode, I'm just going to let it.

###############################################################################
# Main entry point and the code to render the forms and pages described above
###############################################################################

def run(cgi_args, client):
    errors = ErrorTracker()

    print('<html>')
    print('<head>')
    print('<title>Gladius Hiring Challenge Application</title>')
    print('</head>')
    print('<body>')
    print('<h1>Gladius Hiring Challenge Application</h1>')

    # The whole page is just one giant form...
    emit_open_form_tag()

    # Figure out the account. And if it validates OK, use it to try to get
    # the schema with.
    account = cgi_args.getfirst('account')
    app_schema = None
    if account is not None:
        try:
            account = validate_address(account)
        except GladiusAppError as e:
            e.annotate('Account', 'account')
            errors.add(e)
        else:
            try:
                app_schema = get_app_schema(client, account)
            except GladiusAppError as e:
                errors.add(e)

    # Figure out what we're calling the 'mode'. In actuality 'mode' isn't
    # just one CGI variable, it's all of the variables from all of the
    # buttons that the user *could* have pushed to get here. We just have
    # to figure out which *one* of those is the one they *did* push.
    mode = None
    for k in cgi_args.keys():
        if k.startswith('mode_'):
            mode = k[5:]
            break
    if (mode is not None) and (mode not in ('view', 'prepare', 'submit')):
        errors.add(GladiusAppError('unknown mode %s' % (mode,)))

    # Main decision tree (see section in design writeup above)
    if (account is None) or (mode is None) or errors:
        emit_account_selection_form(account, errors, cgi_args, client)
    elif mode == 'view':
        application = \
            action_look_up_application(account, errors, cgi_args, client,
                                       app_schema)
        if (application is not None) and not errors:
            emit_application_viewing_page(application, account, app_schema)
        else:
            emit_account_selection_form(account, errors, cgi_args, client)
    elif mode == 'prepare':
        emit_application_preparation_form(account, errors, cgi_args, client,
                                          app_schema)
    elif mode == 'submit':
        (mutation_receipt, partially_validated_cgi_args) = \
            action_submit_application(account, errors, cgi_args, client,
                                      app_schema)
        if (mutation_receipt is not None) and not errors:
            emit_application_submission_confirmation_page(
                mutation_receipt, account)
        else:
            emit_application_preparation_form(
                account, errors, cgi_args, client, app_schema,
                partially_validated_cgi_args=partially_validated_cgi_args)
    else:
        # This is a programming error on our part. We validated up above
        # that the mode was one of the known strings.
        raise AssertionError

    print('<form>')
    print('<br/>')
    print('<hr/>')
    print('<address>')
    print('Hopeful Gladius candidate: <a href="mailto:%s">%s</a>' %
          (html_escape(g_owner_email), html_escape(g_owner_name)))
    print('</address>')
    print('</body>')
    print('</html>')

# This function is for use at the top of each page, to emit all of the
# errors, even the ones that did not relate to any specific field.
# We need to be prepared here to deal with all kinds of "errors", even,
# say, strings, if that's what's in the list. We're not picky.
def emit_general_errors(errors):
    if not errors:
        return

    if len(errors) > 1:
        noun = 'Errors'
    else:
        noun = 'Error'
    print('<h3><font color="#ff0000">%s:</font></h3>' %
          (html_escape(noun),))

    print('<ul>')
    for e in errors:
        print('<li>')
        print('<font color="#ff0000">')
        print(html_escape(str(e)))
        print('</font>')
        print('</li>')
    print('</ul>')

    print('<hr/>')
    print('<p>&nbsp;</p>')

def emit_account_selection_form(account, errors, cgi_args, client):
    print('<h2>Select Account</h2>')
    emit_general_errors(errors)

    emit_text_field('Account', 'account', account, 42, errors, max_size=42)

    # We don't emit an "account" hidden field here, since we use the one
    # we just made above (which is not hidden!)
    emit_submit_button('view', 'View Application')
    emit_submit_button('prepare', 'Prepare Application')

def emit_application_preparation_form(account, errors, cgi_args, client,
                                      app_schema,
                                      partially_validated_cgi_args=None):
    print('<h2>Prepare Application</h2>')
    emit_general_errors(errors)

    if partially_validated_cgi_args is None:
        partially_validated_cgi_args = {}

    for field_descr in app_schema:
        expected_size = max((len(field_descr['hint']) * 5) // 4, 32)
        val = partially_validated_cgi_args.get(field_descr['cgi_field_name'],
                                               field_descr['hint'])
        emit_text_field(field_descr['label'], field_descr['cgi_field_name'],
                        val, expected_size, errors)

    print('<br/>')
    emit_password_field(
        'Passphrase to unlock account %s (leave blank if you will unlock your '
            'account manually before submitting)' % (html_escape(account),),
        'passphrase', cgi_args.getfirst('passphrase'), 32, errors)

    emit_hidden_field('account', account)
    emit_submit_button(None, 'Switch Account')
    emit_submit_button('submit', 'Apply')

def action_submit_application(account, errors, cgi_args, client, app_schema):
    # We shouldn't have any errors when we *start*. We might have some by
    # the time we *finish*...
    assert(not errors)

    try:
        pub_key_data = \
            inspect_contract(client, client.toChecksumAddress(account),
                             'getPublicKey')
    except GladiusAppError as e:
        pub_key_data = None
        errors.add(e)

    passphrase = cgi_args.getfirst('passphrase')
    if (passphrase is not None) and (passphrase != ''):
        try:
            unlock_account(client, account, passphrase)
        except GladiusAppError as e:
            e.annotate('Passphrase', 'passphrase')
            errors.add(e)

    # OK, we're constructing the actual JSON to submit, now. No more
    # dealing with capitalized 'labels', we're actually using the real
    # Gladius field names now. (But we also have to keep a running
    # dictionary full of our own partially-validated stuff, in case we
    # have to render the form again... and for that, we're using CGI
    # argument names.)
    application = {}
    partially_validated_cgi_args = {}
    for field_descr in app_schema:
        val = cgi_args.getfirst(field_descr['cgi_field_name'])
        if val is None:
            # Sometimes browsers just omit fields if they're blank.
            val = ''

        try:
            val = app_schema.validate(field_descr['application_field_name'],
                                      val)
        except GladiusAppError as e:
            e.annotate(field_descr['label'], field_descr['cgi_field_name'])
            errors.add(e)
        else:
            application[field_descr['application_field_name']] = val

        # Either way, valid or not, we still add it to our partially-validated
        # dict.
        partially_validated_cgi_args[field_descr['cgi_field_name']] = val

    # OK. Do we have any errors? If we do, now's the time to bail.
    if errors:
        return (None, partially_validated_cgi_args)

    # Nope? OK, start building the JSON to submit. And just to be nice to
    # anyone trying to decrypt the JSON on the command line, let's prettyprint
    # it, and include a trailing newline.
    app_as_json = json.dumps(application, indent=4) + '\n'

    # Encrypt...
    try:
        encrypted_app = pgp_encrypt(app_as_json, pub_key_data)
    except GladiusAppError as e:
        errors.add(e)
        return (None, partially_validated_cgi_args)

    # ... and submit!
    try:
        mutation_receipt = \
            mutate_contract(client, account, 'submitApplication',
                            encrypted_app)
    except GladiusAppError as e:
        errors.add(e)
        mutation_receipt = None

    return (mutation_receipt, partially_validated_cgi_args)

def emit_application_submission_confirmation_page(mutation_receipt, account):
    print('<h2>Submitted Application</h2>')
    print('<h3>Account: %s</h3>' % (html_escape(account),))

    print('<p>Success!</p>')
    print('<table border="1" frame="border" rules="none" cellpadding="5">')

    print('<tr>')
    print('<td align="right">Transaction hash:</td>')
    print('<td align="left">%s</td>' %
          (html_escape(mutation_receipt.transaction_hash),))
    print('</tr>')

    if mutation_receipt.block_num is not None:
        print('<tr>')
        print('<td align="right">Block number:</td>')
        print('<td align="left">%d</td>' % (mutation_receipt.block_num,))
        print('</tr>')

    if mutation_receipt.block_hash is not None:
        print('<tr>')
        print('<td align="right">Block hash:</td>')
        print('<td align="left">%s</td>' %
              (html_escape(mutation_receipt.block_hash),))
        print('</tr>')

    print('</table>')

    if mutation_receipt.block_hash is None:
        print('<p>')
        print('<strong>Note:</strong>')
        print('The transaction was submitted to the blockchain, but the')
        print('timeout elapsed before it was either confirmed or rejected.')
        print('Please wait a while and then click the "View Application"')
        print('button below, to confirm your submission.')
        print('</p>')

    emit_hidden_field('account', account)
    emit_submit_button(None, 'Switch Account')
    emit_submit_button('view', 'View Application')

def action_look_up_application(account, errors, cgi_args, client, app_schema):
    # We shouldn't have any errors when we *start*. We might have some by
    # the time we *finish*...
    assert(not errors)

    try:
        return inspect_contract(client, account, 'getApplication',
                                client.toChecksumAddress(account))
    except GladiusAppError as e:
        errors.add(e)
        return None

def emit_application_viewing_page(application, account, app_schema):
    print('<h2>Application</h2>')
    print('<h3>Account: %s</h3>' % (html_escape(account),))

    print('<pre>')
    print(html_escape(application))
    print('</pre>')

    emit_hidden_field('account', account)
    emit_submit_button(None, 'Switch Account')

###############################################################################
# Schema related code
###############################################################################

class ApplicationSchema (object):
    def __init__(self, raw_dict):
        # We don't trust the data that comes in raw. It must be very carefully
        # validated first.
        #
        # Also note that we are checking our assumption that all the values
        # are plain strings. If we find an int or something (or, worse, a
        # nested list or dictionary!) then we want to know about that because
        # it means our assumption was wrong and we need to go write more code.

        if not isinstance(raw_dict, dict):
            raise GladiusAppError('schema must be a dictionary')

        # We store the field descriptions in a list so that we can sort them.
        self.fields = []
        for (application_field_name, hint) in raw_dict.items():
            # In JSON, keys must be strings. This can just be a plain assert.
            assert(isinstance(application_field_name, str))

            if not isinstance(hint, str):
                raise GladiusAppError('Field %s in schema is not a string' %
                                      (application_field_name,))

            # We make the CGI field name by UTF-8 encoding the application
            # field name, and hex-encoding that.
            cgi_field_name = \
                'app_' + \
                binascii.b2a_hex(
                    application_field_name.encode('utf-8')).decode('us-ascii')

            self.fields.append(
                {'application_field_name': application_field_name,
                 'label': application_field_name.title(),
                  'cgi_field_name': cgi_field_name,
                  'hint': hint,
                })

        self.fields.sort(key=lambda x: x['application_field_name'].lower())

    # This is where we'd validate user input if we had any rules to validate
    # it by...! As it is... hm, let's just strip it and check to make sure it
    # wasn't blank?
    def validate(self, application_field_name, s):
        s = s.strip()
        if s == '':
            raise GladiusAppError('cannot be blank')
        return s

    def __iter__(self):
        return iter(self.fields)

def get_app_schema(client, account):
    encrypted_schema = inspect_contract(client, account, 'getEncryptedData')
    decrypted_schema = pgp_decrypt(encrypted_schema, g_privkey,
                                   passphrase=g_privkey_passphrase)
    try:
        schema = json.loads(decrypted_schema)
    except Exception:
        raise GladiusAppError(
                  'schema from getEncryptedData() was not valid JSON')

    return ApplicationSchema(schema)

###############################################################################
# Ethereum utility code
###############################################################################

class MutationReceipt (object):
    def __init__(self, transaction_hash, block_num=None, block_hash=None):
        self.transaction_hash = transaction_hash
        self.block_num = block_num
        self.block_hash = block_hash

# You use 'inspect' for things that you care about the return value of, and
# that can be run locally and don't have to mutate state in the blockchain.
def inspect_contract(client, account, func_name, *args):
    transaction = \
        {'from': client.toChecksumAddress(account),
         'to': client.toChecksumAddress(g_contract),
        }
    contract = \
        client.eth.contract(
            address=client.toChecksumAddress(g_contract),
            abi=g_contract_abi)

    # The web3 library doesn't have any sort of nice exception hierarchy.
    # About the best we can do is to catch Exception, but shrink down the
    # number of things inside the try block, to the minimum possible.
    try:
        f = getattr(contract.functions, func_name)(*args)
        return f.call(transaction)
    except Exception as e:
        raise GladiusAppError(e)

# You use 'mutate' for things that you don't care about the return value of,
# and that mutate state in the blockchain and cannot be run locally.
#
# On success, will return a MutationReceipt. On failure, will raise a
# GladiusAppError. Although, some success conditions are really more like
# timeouts, and an incomplete MutationReceipt (with no block number or block
# hash) will be returned.
def mutate_contract(client, account, func_name, *args):
    transaction = \
        {'from': client.toChecksumAddress(account),
         'to': client.toChecksumAddress(g_contract),
        }
    contract = \
        client.eth.contract(
            address=client.toChecksumAddress(g_contract),
            abi=g_contract_abi)

    # The web3 library doesn't have any sort of nice exception hierarchy.
    # About the best we can do is to catch Exception...
    status = None
    block_num = None
    raw_block_hash = None
    try:
        f = getattr(contract.functions, func_name)(*args)
        raw_transaction_hash = f.transact(transaction)

        wait_until = time.time() + g_transaction_timeout
        while time.time() <= wait_until:
            receipt = client.eth.getTransactionReceipt(raw_transaction_hash)
            if receipt is None:
                time.sleep(1)
                continue

            status = receipt['status']
            if status:
                block_num = receipt['blockNumber']
                raw_block_hash = receipt['blockHash']
            break
    except Exception as e:
        raise GladiusAppError(e)

    # The raw_transaction_hash and raw_block_hash are some kind of weird
    # 'HexBytes' object. Since we're going with the Python 3 flow, and
    # making everything unicode, let's make both of them unicode as well.
    transaction_hash = \
        '0x' + binascii.b2a_hex(raw_transaction_hash).decode('us-ascii')

    if status is None:
        return MutationReceipt(transaction_hash)
    elif status:
        block_hash = \
            '0x' + binascii.b2a_hex(raw_block_hash).decode('us-ascii')
        return MutationReceipt(transaction_hash, block_num, block_hash)
    else:
        raise GladiusAppError(
                  'Transaction hash %s was rejected by the network' %
                  (transaction_hash,))

# If you're just inspecting, the account doesn't need to be unlocked for that.
# If you're mutating, though, the account needs to have been unlocked. Either
# we do that, or the user can do it by some other means.
def unlock_account(client, account, passphrase):
    if not client.personal.unlockAccount(
               client.toChecksumAddress(account), passphrase,
               duration=g_unlock_account_duration):
        raise GladiusAppError('Failed to unlock account %s' % (account,))

###############################################################################
# PGP utility code
###############################################################################

@contextlib.contextmanager
def temporary_pgp_context(key_data):
    # OK, don't laugh. The PGP library seems to need us to have a valid
    # $PATH in our environment. It barfs if we don't.
    #
    # So... do what we gotta do... we save and restore the path before and
    # after.
    old_path = os.environ.get('PATH')
    os.environ['PATH'] = '/usr/local/bin:/usr/bin:/bin'

    with tempfile.TemporaryDirectory() as tempdir:
        os.chmod(tempdir, 0o700)
        ctx = gpg.Context(home_dir=tempdir, armor=True, offline=True)

        # The gpg library needs the key to be in bytes, not unicode...
        ctx.op_import(key_data.encode('us-ascii'))

        # There should be precisely one key in there now. If there's not,
        # something went wrong.
        keys = list(ctx.keylist())
        if len(keys) != 1:
            raise GladiusAppError('Invalid PGP key')
        key = keys[0]

        yield (ctx, key)

    if old_path is not None:
        os.environ['PATH'] = old_path
    else:
        del os.environ['PATH']

def pgp_encrypt(cleartext, pub_key_data):
    with temporary_pgp_context(pub_key_data) as (ctx, key):
        # The gpg library needs the cleartext to be in bytes, not unicode, and
        # it also returns bytes too.
        return ctx.encrypt(cleartext.encode('us-ascii'), recipients=[key],
                           sign=False, always_trust=True)[0].decode('us-ascii')

def pgp_decrypt(ciphertext, priv_key_data, passphrase=None):
    with temporary_pgp_context(priv_key_data) as (ctx, key):
        # The gpg library needs the ciphertext to be in bytes, not unicode, and
        # it also returns bytes too. BUT...! The passphrase can be unicode!
        # Go figure...
        ciphertext_as_bytes = ciphertext.encode('us-ascii')
        try:
            if passphrase is not None:
                cleartext_as_bytes = \
                    ctx.decrypt(ciphertext_as_bytes, verify=False,
                                passphrase=passphrase)[0]
            else:
                cleartext_as_bytes = \
                    ctx.decrypt(ciphertext_as_bytes, verify=False)[0]
        except gpg.errors.GpgError as e:
            raise GladiusAppError(
                      'Decrypt failed (maybe wrong key or bad passphrase?)')

        return cleartext_as_bytes.decode('us-ascii')

###############################################################################
# Miscellaneous utility code
###############################################################################

def main():
    cgitb.enable()

    cgi_args = cgi.FieldStorage()
    client = web3.Web3(web3.HTTPProvider('http://localhost:8545/'))

    print('Content-Type: text/html')
    print('')
    run(cgi_args, client)

def html_escape(s):
    s = s.replace('&', '&amp;')
    s = s.replace('"', '&quot;')
    s = s.replace('<', '&lt;')
    s = s.replace('>', '&gt;')
    return s

# This function is for use before each form field, to emit just the errors
# specific to that one field. Note that we can safely assume that the
# errors we get here are instances of GladiusAppError, since if they weren't,
# the error tracker would have treated them as general errors. Since they
# ended up in the "specific to a field" list, we know they're GladiusAppErrors.
def emit_specific_errors(specific_errors):
    if not specific_errors:
        return

    print('<ul>')
    for e in specific_errors:
        print('<li>')
        print('<font color="#ff0000">')
        assert(isinstance(e, GladiusAppError))
        print(html_escape(e.message))
        print('</font>')
        print('</li>')
    print('</ul>')

def emit_open_form_tag():
    print('<form method="POST" action="%s">' % (html_escape(g_form_url),))

def emit_hidden_field(name, value):
    if value is None:
        return
    print('<input type="hidden" name="%s" value="%s"/>' %
          (html_escape(name), html_escape(value)))

def emit_text_field(label, name, value, expected_size, errors,
                    max_size=None):
    if value is None:
        value = ''

    print('%s:' % (html_escape(label),))
    specific_errors = errors[name]
    if specific_errors:
        emit_specific_errors(specific_errors)
    else:
        print('<br/>')
    print('<input type="text" name="%s" value="%s" size="%d"' %
          (html_escape(name), html_escape(value), expected_size))
    if max_size is not None:
        print(' maxlength="%d"' % (max_size,))
    print('/>')
    print('<br/>')

def emit_password_field(label, name, value, expected_size, errors,
                        max_size=None):
    if value is None:
        value = ''

    print('%s:' % (html_escape(label),))
    specific_errors = errors[name]
    if specific_errors:
        emit_specific_errors(specific_errors)
    else:
        print('<br/>')
    print('<input type="password" name="%s" value="%s" size="%d"' %
          (html_escape(name), html_escape(value), expected_size))
    if max_size is not None:
        print(' maxlength="%d"' % (max_size,))
    print('/>')
    print('<br/>')

def emit_submit_button(mode, label):
    if mode is not None:
        name = 'mode_%s' % (html_escape(mode),)
    else:
        name = 'mode'
    print('<input type="submit" name="%s" value="%s"/>' %
          (html_escape(name), html_escape(label)))

# You can stick anything you want in here. Any type of exception object,
# or even just strings. Anything str()able will work fine.
#
# If you *do* put a GladiusAppError in here, though, then we'll be able to
# look inside it and see if it's one that relates to a specific field or not.
class ErrorTracker (object):
    def __init__(self):
        self.all_errors = []
        self.errors_by_field = {}

    def add(self, e):
        self.all_errors.append(e)
        if isinstance(e, GladiusAppError) and (e.field is not None):
            self.errors_by_field.setdefault(e.field, []).append(e)

    def __len__(self):
        return len(self.all_errors)

    def __iter__(self):
        for e in self.all_errors:
            yield e

    def __getitem__(self, field):
        return self.errors_by_field.get(field, [])

# 'field' refers to the name of the field as it appears in the CGI args.
# 'label' refers to its human-readable name.
class GladiusAppError (Exception):
    def __init__(self, message, label=None, field=None):
        self.message = str(message)
        if (label is not None) and (field is not None):
            self.label = str(label)
            self.field = str(field)
        else:
            self.label = None
            self.field = None

    def __str__(self):
        if self.label is not None:
            return '%s: %s' % (self.label, self.message)
        else:
            return self.message

    def annotate(self, label, field):
        if (label is not None) and (field is not None):
            self.label = str(label)
            self.field = str(field)
        else:
            self.label = None
            self.field = None

def validate_address(s):
    s = s.strip().lower()
    if s.startswith('0x'):
        s = s[2:]
    try:
        s = binascii.b2a_hex(binascii.a2b_hex(s))
    except binascii.Error as e:
        raise GladiusAppError(e)
    s = s.decode('us-ascii')
    if len(s) != 40:
        raise GladiusAppError('addresses must be 40 hexadecimal characters')
    return '0x' + s

###############################################################################
# Static data
###############################################################################

# The literal contents of 'Application-ABI.json' follows
g_contract_abi = json.loads('''
[
    {
        "inputs": [
            {
                "name": "_publicKey",
                "type": "string"
            },
            {
                "name": "_publicData",
                "type": "string"
            },
            {
                "name": "_encryptedData",
                "type": "string"
            }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "constructor"
    },
    {
        "constant": true,
        "inputs": [],
        "name": "getPublicKey",
        "outputs": [
            {
                "name": "",
                "type": "string"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [],
        "name": "getPublicData",
        "outputs": [
            {
                "name": "",
                "type": "string"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [],
        "name": "getEncryptedData",
        "outputs": [
            {
                "name": "",
                "type": "string"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_applicationData",
                "type": "string"
            }
        ],
        "name": "submitApplication",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [],
        "name": "getApplicants",
        "outputs": [
            {
                "name": "",
                "type": "address[]"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_applicant",
                "type": "address"
            }
        ],
        "name": "getApplication",
        "outputs": [
            {
                "name": "",
                "type": "string"
            }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
    }
]
''')

# The literal contents of the given private key in 'README.md' follows
g_privkey = '''-----BEGIN PGP PRIVATE KEY BLOCK-----
Version: Keybase OpenPGP v1.0.0
Comment: https://keybase.io/crypto

xcFFBFrGUr0BBADko60yTU5yXf3oPXVk2NzJaP9GUv7J4mpkAnhrcKlRg/C0WkJS
un+szDe9YXLbQXiW2Xdx1DbRQK1NLQfJZMiiUEmoWvrllmMqn2bBf9xmmeiOFBU9
M8PyhDxL5d3T32ph9+BItyEL/jk4XxSRw7JYT/8MrAmgIm9dtUSRN905mQARAQAB
/gkDCA5X4Xgs1thBYB28qjkOkGnB1PajwpVbckK2nwVhVmmxqZnGxt6cdrkbjujm
Pel4x8ejsU98BGRy+A21Mi4UfDlIs7JvfkzFABadZxE3E6QI02Ava4RXRgE8rQkJ
6oCUlAlSSP7L0aMI2Q8cVBYlR4Ys5RrdpTkx42kEwFhiO/T5TFCS3s0qrCjt9tCh
Qvp+d+crsBwKSlFZg4wJqbBDR4I7M7tKPcXI0kFynfjsKUVSvq43ZD2LtZbHJfLK
5TdJV3OVvleMPPhGtQRVAEofEFaCIszir1PyLRgqd7Urcj6alIgce2HZH2ea3AYY
ymNINV/aaKi1J+I7vLYojEMECjg6mHO5kgTXc1anNID3mwaY2OwcAq1o918gvgha
0/jDabQuRB60yzxGclnjEoLCu6kDs5q4jKo8Vo5Glz2rWVeYxhMQW4flUFbgLdlN
z/Imi4S5w1S+zqZyCVATY1LKWcT5u3vHXIApSPSyDg/sevDsREwX9c0iR2xhZGl1
cyBIaXJlZSA8Y2FyZWVyc0BnbGFkaXVzLmlvPsKtBBMBCgAXBQJaxlK9AhsvAwsJ
BwMVCggCHgECF4AACgkQOJkS2avka0B6VQP9H2d03SZicyY+7iblBQENgd62LmB/
q8oNC1VL202zvFoMVbsbU46w1S9MQdjNc1VYIfIPSV+oyi6Ff/IOvQW96Zh1GPmn
IwN5+MIcfPWwWy/Pl3NMav7SnJ8oVVooHIoKz4gStMH0dyCZQi5kiIoQnDSQ09GC
qi6Nv+D9lv0Ab/HHwUYEWsZSvQEEAMAU50K0XKJWqhVQlem6oCodfBzau/0lX2T2
BZlNrJcDr00NNPMjxBNKShEmP9a86FYHvAHRnAZsYqJT9rx4tEDNi8fEZwV2OlDe
nsiQ2dpIICa7tpks2o1PMxy8bpzAiJeO42p9+BqgzRFGEQWT+PKEd/61pm9kE31A
VOL/x/DBABEBAAH+CQMI9GtTF0a5EXtgB8DPQoDl+yWgY7QfzYKCSSAigi/Y8FJU
paVQigdchLEgo6hrQqUCvtSv6vF5RxVek2bTimyy9SVRC2ovrIjaIDKErRbghmlf
Qi1lea7GidvX6WC2Cqc+tyz9g7bTlI9tGS5Y4+vTjVGWV6eCXOS1U0jy+OvRIa9q
ftyuASe9sHE4WN7bI+Amp7JGPRirVNCKPsFInh/q64KNiKUSx8r+0tmrtTPhVvVt
OAI7n6rQzAoxQtw0lG+ZW0D7S+KePihAxi0MClbWoAoDDRooasJtRFkME3izG8h3
AUw9lxRCjzyGr9xdJzhPVxMpPFwMKIfj/EL1esMdw54+yH8Sl1W3iByVuTv7Hxbl
eCHq6Q/KvDEQYzJsuD4U6zGzQlE8Co+dnoROKOKamuT+v7vn/jnZ0CDU7Wa/64Jl
31I8MXCaH/S79z3xPM300Y+CbBsbBwrfbIRf2PC2oJeJzccNPJjS2TNRphRpaKVG
ORy2osLAgwQYAQoADwUCWsZSvQUJDwmcAAIbLgCoCRA4mRLZq+RrQJ0gBBkBCgAG
BQJaxlK9AAoJEB7UedMAB3/4HycEALsMFZntQRiqzQNy1TIIN/KdxkndXYQC6Dc7
u0EJgwzz81jlmwEKpHpluTz58p65hRfu465j2HAzGjPQP8Mcosu0tKCAQLYDwzX9
C4BBc94psjTyEi8da8lubgBdJjyhv4KMHG1zct/GazAahw3ek3spglOIeUiDOZN1
APa+eplEwd8EAJMZNbam1cUx5i9+ayarjYH1xtGFMQz7/S6icIK8MLPw4jDgd3oQ
XwYVFAc5t6yKbtd5SFk8xgrbx6nkZ/xCfCD3gl2tjFpqk742B2G31aF4A++UFr/K
6aAv0nObWuraIcpnkla0O8kU+dB/dDvln4JdtKsc1wPgRMrqyZWWZZ0mx8FGBFrG
Ur0BBAC15JKl7Sc0O9WwcRe1tLe8sRul6O5pyGt0phSxZnWH4iTCbSxjNvTPrPCx
Wr4a2yAajzxUojkvk9AfTiJ71Zr8WfCSHvYnBm5V3VVDnqh3Rt5MnFk0S2G2CBgG
78xXnQ4BfdXIJykJFEcWAxq9N/rxQDHfLsO91ejq0suY8E6OAwARAQAB/gkDCAg2
+IHs3CehYKW2vm42Ln7m20Cd9xpxFiROAEFmRwlxqFQHgmnEFh1NUpGWMBMf6uLU
qTiRVvV7vQ+3sA+IsnTbv/p+CScFCEZeMY8BneocVx3baeSC3CZ5Z0dzxHDkDri1
y90fDNcjmqy1i82EBvhaOPC5dOzNkJmWMzma0gk+OKbhZVswRHdl3lnNltxJEqcn
QzFDO/77/0mesmrGstFZoJMaBD1m0dzFqVz/FyEZYsB8LMiUUk+StlP4OP1SETVp
3qgpBQVSEAt9GF4HbOFtT7NZpzjqjLAq1dR+pME0RnsT8DZvkV1s9GdCTJWMfiVI
BkLGR8zFqgCuDJYS7FvyrrVRY4DopJMyPfzQdKFrP3ENVpfn7y2Xt1zxQ0OkX6FH
8IkSIlDJgA94JmFKoCW1TcBrWjQtA97A9UZMoXTPoDft6Ax1RP/5jZ7eyaGusIai
mGQy6wwhLYOCizWUTYzmJG9yxeVVy68AGkweUw71deCYJTDCwIMEGAEKAA8FAlrG
Ur0FCQ8JnAACGy4AqAkQOJkS2avka0CdIAQZAQoABgUCWsZSvQAKCRDf4cLmfBev
NnbNA/9AmEET9/AnKxzwBjlEH2MHf8+ryymKk5k4wvQMb1uSXOFtiX+Mr3TtkyGn
BivypfKyHydkGCfPqv4uB7toiXdj9EYtg0LAOg2/LHLjQQg3jXPI3ScHTp8/W2Ym
w9MezsUK26peAqMUBPPsA4cSeNI+gXHkNxF4cQGlldvANXwb9ZR+BADiimNtntKt
u0eDTsTwZky1qJGOkwTme2xK1JFs1UdiI9s9KNiXeVhnSZdVmrFFpaR87AynS3TE
jgS6JR4eNEG+TqYSLWygATAd9jVCDZfaO9T5wDJm5U2jTkKfFDIHl3vKVNtet2oG
7v+Ou3J32JmE2pL9DbEbxQMt4NPh1dbytQ==
=4GZS
-----END PGP PRIVATE KEY BLOCK-----
'''

# The literal contents of the given private key passphrase in 'README.md'
# follows
g_privkey_passphrase = 'password'

###############################################################################
# Invoke main() if we're not being imported as a library.
###############################################################################
if __name__ == '__main__':
    main()
